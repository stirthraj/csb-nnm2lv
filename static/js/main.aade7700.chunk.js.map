{"version":3,"sources":["App.js","redux/slices/counter.js","redux/rootReducer.js","redux/store.js","Count.js","index.js"],"names":["App","useState","open","setOpen","bodmas","opsign","op1","Math","floor","random","op2","op3","w","x","y","z","document","getElementById","innerHTML","eval","className","onClick","id","style","display","slice","createSlice","name","initialState","counter","reducers","getValue","state","action","payload","statusType","status","dispatch","actions","rootReducer","combineReducers","counterReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","useSelector","useReduxSelector","Count","useReduxDispatch","rootElement","ReactDOM","render"],"mappings":"q2BAGe,SAASA,MACtB,cAAwBC,qDAAS,GAAjC,gNAAOC,KAAP,cAAaC,QAAb,cAEA,SAASC,SACPD,SAAQ,GACR,IAAIE,OAAS,CAAC,IAAK,IAAK,IAAK,KACzBC,IAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBC,IAAMH,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBE,IAAMJ,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBG,EAAIL,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GACpCI,EAAIN,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GACpCK,EAAIP,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GACpCM,EAAIR,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GACxCO,SAASC,eAAe,QAAQC,UAC9BL,EAAIR,OAAOC,KAAOQ,EAAIT,OAAOK,KAAOK,EAAIV,OAAOM,KAAOC,EACxDI,SAASC,eAAe,UAAUC,UAAYC,KAC5CN,EAAIR,OAAOC,KAAOQ,EAAIT,OAAOK,KAAOK,EAAIV,OAAOM,KAAOC,GAI1D,OACE,mEAAKQ,UAAU,iBAAf,UACE,kEAAKA,UAAU,QAAf,gCACA,kEAAKA,UAAU,QAAf,SACE,4FAEF,mEAAKA,UAAU,QAAf,UACE,qEAAQC,QAASjB,OAAjB,6BACA,qEAAQiB,QAAS,kBAAMlB,SAASD,OAAhC,oBACA,oEACA,kEAAKoB,GAAG,SACR,oEACA,kEAAKC,MAAO,CAAEC,QAAStB,KAAO,QAAU,QAAUoB,GAAG,cAEvD,kEAAKF,UAAU,QAAf,iC,oHC/BAK,EAAQC,YAAY,CACxBC,KAAM,UACNC,aANmB,CACnBC,QAAS,IAMTC,SAAU,CACRC,SADQ,SACCC,EAAOC,GACdD,EAAMH,QAAUI,EAAOC,YAKdT,IAAf,QAEO,SAASU,EAAWC,GACzB,wDAAO,WAAOC,GAAP,2EACLA,EAASZ,EAAMa,QAAQP,SAASK,IAD3B,2CAAP,sD,mBCPIG,EAAcC,YAAgB,CAClCX,QAASY,ICFLC,EAAQC,YAAe,CAE3BC,QAASL,EAETM,WAAYC,YAAqB,CAC/BC,mBAAmB,EACnBC,gBAAgB,MAMdC,EAAcC,I,OCpBL,SAASC,IACtB,IAAMd,EDqBkBe,cCpBhBvB,EAAYoB,GAAY,SAACjB,GAAD,OAAWA,EAAMH,WAAzCA,QAER,OACE,qCACE,8BAAMA,IACN,wBAAQR,QAAS,kBAAMgB,EAASF,EAAWN,EAAU,KAArD,eACA,wBAAQR,QAAS,kBAAMgB,EAASF,EAAWN,EAAUA,KAArD,eACA,wBAAQR,QAAS,kBAAMgB,EAASF,EAAWN,EAAU,KAArD,kB,KCHN,IAAMwB,EAAcrC,SAASC,eAAe,QAC5CqC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAeb,MAAOA,EAAtB,SACE,cAACS,EAAD,QAKJE,K","file":"static/js/main.aade7700.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  function bodmas() {\n    setOpen(false);\n    let opsign = [\"+\", \"-\", \"*\", \"/\"];\n    var op1 = Math.floor(Math.random() * 3);\n    var op2 = Math.floor(Math.random() * 3);\n    var op3 = Math.floor(Math.random() * 3);\n    var w = Math.floor(Math.random() * 10 + 1);\n    var x = Math.floor(Math.random() * 10 + 1);\n    var y = Math.floor(Math.random() * 10 + 1);\n    var z = Math.floor(Math.random() * 10 + 1);\n    document.getElementById(\"card\").innerHTML =\n      x + opsign[op1] + y + opsign[op2] + z + opsign[op3] + w;\n    document.getElementById(\"answer\").innerHTML = eval(\n      x + opsign[op1] + y + opsign[op2] + z + opsign[op3] + w\n    ); //eval\n  }\n\n  return (\n    <div className=\"grid-container\">\n      <div className=\"item1\">KHOJDEAL GAME PLAY</div>\n      <div className=\"item2\">\n        <h3>Bodmas Game</h3>\n      </div>\n      <div className=\"item3\">\n        <button onClick={bodmas}>Change Question</button>\n        <button onClick={() => setOpen(!open)}>Answer</button>\n        <hr />\n        <div id=\"card\"></div>\n        <hr />\n        <div style={{ display: open ? \"block\" : \"none\" }} id=\"answer\"></div>\n      </div>\n      <div className=\"item5\">COPYRIGHT 2021</div>\n    </div>\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  counter: 10\n};\n\nconst slice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    getValue(state, action) {\n      state.counter = action.payload;\n    }\n  }\n});\n\nexport default slice.reducer;\n\nexport function statusType(status) {\n  return async (dispatch) => {\n    dispatch(slice.actions.getValue(status));\n  };\n}\n","import { combineReducers } from \"redux\";\n// import storage from \"redux-persist/lib/storage\";\n\nimport counterReducer from \"./slices/counter\";\n\nconst rootPersistConfig = {\n  // key: \"root\",\n  // storage,\n  // keyPrefix: \"redux-\",\n  // whitelist: []\n};\n\nconst rootReducer = combineReducers({\n  counter: counterReducer\n});\n\nexport { rootPersistConfig, rootReducer };\n","import {\n  useDispatch as useReduxDispatch,\n  useSelector as useReduxSelector\n} from \"react-redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n// import { persistStore, persistReducer } from \"redux-persist\";\n//\nimport { rootPersistConfig, rootReducer } from \"./rootReducer\";\n\n// ----------------------------------------------------------------------\n\nconst store = configureStore({\n  // reducer: persistReducer(rootPersistConfig, rootReducer),\n  reducer: rootReducer,\n\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n    immutableCheck: false\n  })\n});\n\n// const persistor = persistStore(store);\n\nconst useSelector = useReduxSelector;\n\nconst useDispatch = () => useReduxDispatch();\n\n// export { store, persistor, useSelector, useDispatch };\nexport { store, useSelector, useDispatch };\n","import { statusType } from \"./redux/slices/counter\";\nimport { useDispatch, useSelector } from \"./redux/store\";\n\nexport default function Count() {\n  const dispatch = useDispatch();\n  const { counter } = useSelector((state) => state.counter);\n\n  return (\n    <>\n      <div>{counter}</div>\n      <button onClick={() => dispatch(statusType(counter + 1))}>+</button>\n      <button onClick={() => dispatch(statusType(counter * counter))}>*</button>\n      <button onClick={() => dispatch(statusType(counter - 1))}>-</button>\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport Count from \"./Count\";\nimport Quiz from \"./Quiz\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <ReduxProvider store={store}>\n      <Count />\n    </ReduxProvider>\n    {/* <App /> */}\n    {/* <Quiz /> */}\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}